import { createSlice } from '@reduxjs/toolkit';

const initialState = [
  {
    id: 1,
    text: 'Use Redux',
    completed: false
  }
];

//* The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
/* export const incrementAsync = createAsyncThunk('counter/fetchCount', async (amount: number) => {
  const response = await fetchCount(amount);
  // The value we return becomes the `fulfilled` action payload
  return response.data;
}); */

export const todoSlice = createSlice({
  name: 'todo',
  initialState,
  //* The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    ADDTODO: (state, action) => {
      //* Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      const newTodo = {
        id: state.reduce((max, todo) => Math.max(todo.id || 1, max), 0) + 1,
        completed: false,
        text: action.payload.text
      };
      state.push(newTodo);
    },

    //* Use the PayloadAction type to declare the contents of `action.payload`
    EDITTODO: (state, action) => {
      return state.map((todo) => {
        if (!todo || !action || !action.payload) {
          return todo;
        }
        return (todo.id || 0) === action.payload.id ? { ...todo, text: action.payload.text } : todo;
      });
    },

    DELETETODO: (state, action) => {
      return state.filter((todo) => todo.id !== action.payload);
    },

    COMPLETETODO: (state, action) => {
      return state.map((todo) => (todo.id === action.payload ? { ...todo, completed: !todo.completed } : todo));
    },

    COMPLETEALL: (state) => {
      return state.map((todo) => ({ ...todo, completed: true }));
    },

    CLEARCOMPLETED: (state) => {
      return state.filter((todo) => todo.completed === false);
    }
  }

  //* The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  /*  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      })
      .addCase(incrementAsync.rejected, (state) => {
        state.status = 'failed';
      });
  } */
});

export const { ADDTODO, EDITTODO, DELETETODO, COMPLETETODO, COMPLETEALL, CLEARCOMPLETED } = todoSlice.actions;

//* A mock function to mimic making an async request for data
/* export function fetchCounter(amount = 1) {
  return new Promise<{ data: number }>((resolve) => setTimeout(() => resolve({ data: amount }), 500));
} */

//* The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
/* export const selectCount = (state: RootState) => state.counter.value; */

//* We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
/* export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount));
    }
  }; */

export default todoSlice.reducer;
